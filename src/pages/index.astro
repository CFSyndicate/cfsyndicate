---
import MainLayout from "../layouts/MainLayout.astro";
import "../styles/global.css";
---

<MainLayout title="Home">
  <!-- Hero Section -->
  <section class="text-center py-20 md:py-32 px-6 bg-hero">
    <!-- Hero Owl Slot -->
    <div class="w-24 h-32 mx-auto mb-6 text-5xl">
      <div id="hero-owl" class="owl-container mx-auto w-24 h-32 mb-6 relative">
      </div>
    </div>

    <h1
      class="text-5xl md:text-7xl mb-6 text-white noselect title-glow"
      style="font-family: 'Anton', sans-serif;"
    >
      Concord Forge Syndicate
    </h1>

    <p
      class="punchline text-xl md:text-3xl max-w-2xl mx-auto text-white mt-8 md:mt-16 noselect"
      style="font-family: 'Poppins', sans-serif;"
    >
      <span>Code crafted <span class="highlight-strong">strong</span>.</span>
      <span>Design refined <span class="highlight-sharp">sharp</span>.</span>
      <span
        >Ideas forged into <span class="highlight-solutions">solutions</span
        >.</span
      >
    </p>
  </section>

  <!-- What We Do Section -->
  <section class="py-16 bg-black/50">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl mb-10">
        From Desktop to the Web, We Build It Right.
      </h2>
      <div class="grid md:grid-cols-3 gap-8">
        <!-- Card 1 -->
        <div class="bg-white/5 p-8 rounded-lg border border-white/10">
          <h3 class="text-xl text-forge-accent mb-2">Desktop Applications</h3>
          <p class="text-forge-text-secondary">
            Reliable and performant applications for Windows and Linux, tailored
            to your workflow.
          </p>
        </div>
        <!-- Card 2 -->
        <div class="bg-white/5 p-8 rounded-lg border border-white/10">
          <h3 class="text-xl text-forge-accent mb-2">Web Services & APIs</h3>
          <p class="text-forge-text-secondary">
            Secure, scalable backends and APIs built with Python, JavaScript,
            and modern frameworks.
          </p>
        </div>
        <!-- Card 3 -->
        <div class="bg-white/5 p-8 rounded-lg border border-white/10">
          <h3 class="text-xl text-forge-accent mb-2">Web Apps & Interfaces</h3>
          <p class="text-forge-text-secondary">
            Clean, intuitive, and fast user interfaces using modern web
            technologies.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Our Toolkit Section -->
  <section class="py-16">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl mb-10">Our areas of expertise</h2>
      <div
        class="flex flex-wrap justify-center items-center gap-4 text-forge-text-secondary"
      >
        <span
          class="inline-flex items-center gap-x-2 bg-white/5 px-3 py-2 rounded-full border border-white/10"
        >
          <img
            class="h-4 w-4"
            src="/cfsyndicate/lang/python.svg"
            alt="Python Logo"
          />
          Python
        </span>
        <span
          class="inline-flex items-center gap-x-2 bg-white/5 px-3 py-2 rounded-full border border-white/10"
        >
          <img class="h-4 w-4" src="/cfsyndicate/lang/cpp.svg" alt="C++ Logo" />
          C++</span
        >
        <span
          class="inline-flex items-center gap-x-2 bg-white/5 px-3 py-2 rounded-full border border-white/10"
        >
          <img
            class="h-4 w-4"
            src="/cfsyndicate/lang/typescript.svg"
            alt="C++ Logo"
          />
          TypeScript</span
        >
        <span
          class="inline-flex items-center gap-x-2 bg-white/5 px-3 py-2 rounded-full border border-white/10"
        >
          <img
            class="h-4 w-4"
            src="/cfsyndicate/lang/csharp.svg"
            alt="C++ Logo"
          />
          C# / .NET</span
        >

        <span
          class="inline-flex items-center gap-x-2 bg-white/5 px-3 py-2 rounded-full border border-white/10"
        >
          <img
            class="h-4 w-4"
            src="/cfsyndicate/lang/windows.svg"
            alt="C++ Logo"
          />
          Windows</span
        >
        <span
          class="inline-flex items-center gap-x-2 bg-white/5 px-3 py-2 rounded-full border border-white/10"
        >
          <img
            class="h-4 w-4"
            src="/cfsyndicate/lang/linux.svg"
            alt="C++ Logo"
          />
          Linux</span
        >
      </div>
    </div>
  </section>

  <!-- Procedural Owl Generator Section -->
  <section class="py-16 bg-black/50">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl mb-10">
        Procedural Owl <span class="highlight-strong-subtle">Forge</span>
      </h2>

      <div id="owlCanvas" class="mx-auto w-40 h-48"></div>

      <div class="mt-4">
        <p class="text-sm text-gray-400 mb-2">
          Current Seed: <code
            id="current-seed-display"
            class="bg-black/20 px-2 py-1 rounded"></code>
        </p>
        <input
          id="seed-input"
          type="text"
          placeholder="Enter a seed to forge..."
          class="bg-white/5 border border-white/10 rounded-lg px-4 py-2 text-center text-white"
        />
      </div>

      <div class="mt-6 flex flex-wrap justify-center gap-2">
        <!-- The main "Forge" button -->
        <button
          id="regenOwl"
          class="px-6 py-2 bg-orange-500 text-black font-bold rounded-lg hover:bg-orange-400 active:scale-95 transition-all"
        >
          Forge New Owl
        </button>

        <!-- NEW: The "Save to Gallery" Button -->
        <button
          id="saveOwlBtn"
          class="group relative flex items-center justify-center gap-2 px-6 py-2 bg-slate-800 text-slate-300 font-semibold rounded-lg border border-slate-700
           hover:border-orange-500 hover:bg-slate-700 hover:text-white
           active:scale-95
           disabled:bg-slate-800 disabled:text-slate-500 disabled:cursor-not-allowed
           transition-all duration-200 ease-in-out"
        >
          <!-- Spinner (hidden by default) -->
          <svg
            class="animate-spin h-5 w-5 text-slate-500 hidden"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"></circle>
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>

          <!-- Button Text -->
          <span class="button-text">Save to Gallery</span>
        </button>

        <!-- The "Share" button -->
        <button
          id="shareOwlBtn"
          class="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-500 active:scale-95 transition-all"
        >
          Share Owl
        </button>
      </div>
    </div>
  </section>

  <style>
    .bg-grid-pattern {
      background-color: #000000;
      background-image: linear-gradient(
          rgba(225, 93, 2, 0.1) 1px,
          transparent 1px
        ),
        linear-gradient(90deg, rgba(225, 93, 2, 0.1) 1px, transparent 1px);
      background-size: 3rem 3rem;
    }
  </style>

  <script>
    import * as htmlToImage from "html-to-image";

    const titles = [
      "The",
      "Lord",
      "Lady",
      "Sir",
      "Elder",
      "Agent",
      "Captain",
      "",
    ];
    const adjectives = [
      "Clever",
      "Wise",
      "Silent",
      "Swift",
      "Ancient",
      "Golden",
      "Iron",
      "Stout",
      "Keen",
      "Shadow",
      "Runic",
      "Arcane",
      "Gilded",
      "Sturdy",
      "Ashen",
      "Sable",
      "Wired",
      "Digital",
      "Forged",
      "Hollow",
      "Vigilant",
      "First",
      "Last",
    ];
    const nouns = [
      "Owl",
      "Forge",
      "Anvil",
      "Talon",
      "Feather",
      "Rune",
      "Hammer",
      "Spark",
      "Heart",
      "Wing",
      "Cinder",
      "Ember",
      "Codex",
      "Glyph",
      "Circuit",
      "Matrix",
      "Sentinel",
      "Guardian",
      "Key",
      "Core",
      "Spire",
      "Vertex",
      "Cipher",
    ];

    async function generateShareableImage(
      targetContainer,
      seed,
      shareImagePreview
    ) {
      const owlColorHex = targetContainer.dataset.owlColor;
      const random = mulberry32(stringToHash(seed));

      // Create a temporary element to render the final image from
      const renderNode = document.createElement("div");
      renderNode.style.width = "400px";
      renderNode.style.height = "400px";
      renderNode.style.display = "flex";
      renderNode.style.alignItems = "center";
      renderNode.style.justifyContent = "center";
      renderNode.style.padding = "40px";

      // Procedural background: a soft radial gradient
      const bgHue = (random() * 360).toFixed(0);
      const bgColor1 = `hsl(${bgHue}, 30%, 10%)`;
      const bgColor2 = `hsl(${bgHue}, 35%, 5%)`;
      renderNode.style.background = `radial-gradient(circle, ${bgColor1} 0%, ${bgColor2} 100%)`;

      // Clone the owl SVG and add a drop shadow to make it pop
      const owlSvgClone = targetContainer.querySelector("svg").cloneNode(true);
      owlSvgClone.style.filter = "drop-shadow(0 10px 15px rgba(0,0,0,0.4))";
      renderNode.appendChild(owlSvgClone);

      // Append to body to render, but keep it off-screen
      document.body.appendChild(renderNode);

      try {
        // Generate the PNG, skipping font embedding to avoid CORS issues
        const dataUrl = await htmlToImage.toPng(renderNode, {
          skipFonts: true,
        });
        shareImagePreview.src = dataUrl;
      } catch (error) {
        console.error("Image generation failed!", error);
      } finally {
        // Clean up the temporary node
        document.body.removeChild(renderNode);
      }
    }

    function generateMemorableSeed() {
      const title = titles[Math.floor(Math.random() * titles.length)];
      const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
      const noun = nouns[Math.floor(Math.random() * nouns.length)];
      const num = Math.floor(Math.random() * 999) + 1; // Increased number range
      return title ? `${title} ${adj} ${noun}-${num}` : `${adj}-${noun}-${num}`;
    }

    // NEW: Converts any string into a consistent 32-bit integer for the generator
    function stringToHash(str) {
      let hash = 0;
      for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash |= 0; // Convert to 32bit integer
      }
      return hash;
    }
    // 1. A seedable random number generator to replace Math.random()
    function mulberry32(a) {
      return function () {
        var t = (a += 0x6d2b79f5);
        t = Math.imul(t ^ (t >>> 15), t | 1);
        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);
        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
      };
    }

    document.addEventListener("astro:page-load", () => {
      // Get all elements
      const heroContainer = document.getElementById("hero-owl");
      const owlCanvas = document.getElementById("owlCanvas");
      const regenBtn = document.getElementById("regenOwl");
      const seedInput = document.getElementById("seed-input");
      const seedDisplay = document.getElementById("current-seed-display");

      const shareBtn = document.getElementById("shareOwlBtn");
      const shareModal = document.getElementById("share-modal");
      const closeModalBtn = document.getElementById("close-modal-btn");
      const shareImagePreview = document.getElementById("share-image-preview");
      const shareTwitter = document.getElementById("share-twitter");
      const shareBsky = document.getElementById("share-bsky");
      const saveBtn = document.getElementById("saveOwlBtn");

      function generateOwl(container, numericSeed) {
        const random = mulberry32(numericSeed);

        // --- Procedural Generation Flags ---
        const gender = numericSeed % 2 === 0 ? "Male" : "Female";
        const hasBellyPattern = random() > 0.5; // 50% chance for belly markings
        const hasRune = random() > 0.7; // 30% chance for a forehead rune
        const hasCheekBlush = random() > 0.6; // 40% chance for blush

        container.dataset.owlGender = gender;

        // --- Palettes & Colors ---
        const bodyColors = [
          "#6b4226",
          "#4b3621",
          "#8b5e3c",
          "#5c4033",
          "#42342b",
        ];
        const bellyColors = ["#f4e1c1", "#e8d3a8", "#fff2d1", "#f5deb3"];
        const maleEyeColors = ["#fff", "#f9f9f9", "#fffcf2"];
        const femaleEyeColors = ["#fff2d1", "#f5e8d3", "#fff9e3"]; // Softer for females
        const irisColors = ["#2c2c2c", "#3b2f2f", "#1b1b1b", "#4a3c2a"];
        const beakAndFeetColor = "#e09f3e";
        const blushColor = "rgba(224, 122, 95, 0.4)"; // A soft, rosy blush color

        // --- Procedural Values ---
        const eyeSize = random() * 6 + 12;
        const bodyWidthFactor = 0.8 + random() * 0.4;
        const isPuffy = random() > 0.6;
        const owlBodyColor =
          bodyColors[Math.floor(random() * bodyColors.length)];
        const wingColor = bodyColors[Math.floor(random() * bodyColors.length)];
        const bellyColor =
          bellyColors[Math.floor(random() * bellyColors.length)];
        const eyeColor = (
          gender === "Female" ? femaleEyeColors : maleEyeColors
        )[Math.floor(random() * 3)];
        const irisColor = irisColors[Math.floor(random() * irisColors.length)];

        container.dataset.owlColor = owlBodyColor;

        // --- Dynamic Dimensions ---
        const bodyRx = 40 * bodyWidthFactor;
        const bellyRx = 28 * bodyWidthFactor;
        const wingSeparation = 28 * bodyWidthFactor;
        const eyeSeparation = 18 * bodyWidthFactor;
        const earSeparation = 35 * bodyWidthFactor;
        const feetSeparation = 10 * bodyWidthFactor;

        // --- SVG Part Generation ---
        const filterAttribute = isPuffy ? 'filter="url(#puffy-filter)"' : "";

        // RESTORED: Belly pattern logic
        let bellyPatternSvg = "";
        if (hasBellyPattern) {
          const patternType = random() > 0.5 ? "spots" : "stripes";
          const patternColor = owlBodyColor;
          const spotSize = 1.5 + random() * 1;
          if (patternType === "spots") {
            bellyPatternSvg = `
                    <circle cx="${60 - bellyRx * 0.3}" cy="95" r="${spotSize}" fill="${patternColor}" opacity="0.6"/>
                    <circle cx="${60 + bellyRx * 0.3}" cy="95" r="${spotSize}" fill="${patternColor}" opacity="0.6"/>
                    <circle cx="60" cy="105" r="${spotSize}" fill="${patternColor}" opacity="0.6"/>`;
          } else {
            bellyPatternSvg = `
                    <line x1="${60 - bellyRx * 0.5}" y1="95" x2="${60 + bellyRx * 0.5}" y2="95" stroke="${patternColor}" stroke-width="2" opacity="0.6"/>
                    <line x1="${60 - bellyRx * 0.5}" y1="105" x2="${60 + bellyRx * 0.5}" y2="105" stroke="${patternColor}" stroke-width="2" opacity="0.6"/>`;
          }
        }

        const eyelashes =
          gender === "Female"
            ? `<!-- Left Eyelash -->
             <path d="M ${60 - eyeSeparation - eyeSize * 0.7},${60 - eyeSize * 0.5} C ${60 - eyeSeparation - eyeSize},${60 - eyeSize} ${60 - eyeSeparation - eyeSize * 1.3},${60 - eyeSize * 0.8}" stroke="${wingColor}" stroke-width="1.5" fill="none" stroke-linecap="round"/>
             <!-- Right Eyelash (Fixed coordinates) -->
             <path d="M ${60 + eyeSeparation + eyeSize * 0.7},${60 - eyeSize * 0.5} C ${60 + eyeSeparation + eyeSize},${60 - eyeSize} ${60 + eyeSeparation + eyeSize * 1.3},${60 - eyeSize * 0.8}" stroke="${wingColor}" stroke-width="1.5" fill="none" stroke-linecap="round"/>`
            : "";

        // NEW: Forehead rune logic
        let runeSvg = "";
        if (hasRune) {
          const runes = [
            `<circle cx="60" cy="45" r="3" stroke="${wingColor}" stroke-width="1.5" fill="none"/>`, // Circle Rune
            `<path d="M 60 42 L 57 48 L 63 48 Z" fill="${wingColor}"/>`, // Triangle Rune
            `<path d="M 58 42 L 62 48 M 62 42 L 58 48" stroke="${wingColor}" stroke-width="2" stroke-linecap="round"/>`, // 'X' Rune
          ];
          runeSvg = runes[Math.floor(random() * runes.length)];
        }

        // NEW: Cheek blush logic
        const blushSvg = hasCheekBlush
          ? `<ellipse cx="${60 - eyeSeparation - eyeSize * 0.5}" cy="72" rx="5" ry="3" fill="${blushColor}" />
             <ellipse cx="${60 + eyeSeparation + eyeSize * 0.5}" cy="72" rx="5" ry="3" fill="${blushColor}" />`
          : "";

        // --- Final SVG Assembly ---
        const svg = `
<svg viewBox="0 0 120 140" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <radialGradient id="bodyGradient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
      <stop offset="0%" stop-color="${owlBodyColor}" stop-opacity="0.7" /><stop offset="100%" stop-color="${owlBodyColor}" />
    </radialGradient>
    ${isPuffy ? `<filter id="puffy-filter"><feTurbulence type="fractalNoise" baseFrequency="${0.05 + random() * 0.05}" numOctaves="3" result="turbulence"/><feDisplacementMap in="SourceGraphic" in2="turbulence" scale="${5 + random() * 5}" xChannelSelector="R" yChannelSelector="G"/></filter>` : ""}
  </defs>

  <!-- Body & Wings -->
  <ellipse cx="60" cy="85" rx="${bodyRx}" ry="45" fill="url(#bodyGradient)" ${filterAttribute} />
  <ellipse cx="${60 - wingSeparation}" cy="85" rx="15" ry="30" fill="${wingColor}" transform="rotate(-10 ${60 - wingSeparation} 85)" ${filterAttribute} />
  <ellipse cx="${60 + wingSeparation}" cy="85" rx="15" ry="30" fill="${wingColor}" transform="rotate(10 ${60 + wingSeparation} 85)" ${filterAttribute} />
  
  <!-- Belly & Decorations -->
  <ellipse cx="60" cy="95" rx="${bellyRx}" ry="32" fill="${bellyColor}" opacity="0.9"/>
  ${bellyPatternSvg}
  ${blushSvg}

  <!-- Face -->
  <circle cx="${60 - eyeSeparation}" cy="60" r="${eyeSize}" fill="${eyeColor}" />
  <circle cx="${60 + eyeSeparation}" cy="60" r="${eyeSize}" fill="${eyeColor}" />
  <circle cx="${60 - eyeSeparation}" cy="60" r="${eyeSize / 2}" fill="${irisColor}" />
  <circle cx="${60 + eyeSeparation}" cy="60" r="${eyeSize / 2}" fill="${irisColor}" />
  <!-- NEW: Eye Glints -->
  <circle cx="${60 - eyeSeparation + eyeSize * 0.25}" cy="${60 - eyeSize * 0.25}" r="${eyeSize * 0.15}" fill="white" />
  <circle cx="${60 + eyeSeparation + eyeSize * 0.25}" cy="${60 - eyeSize * 0.25}" r="${eyeSize * 0.15}" fill="white" />

  ${eyelashes}
  
  <polygon points="56,70 64,70 60,78" fill="${beakAndFeetColor}" />

  <!-- Head & Ears -->
  ${runeSvg}
  <polygon points="${60 - earSeparation - 10},50 ${60 - earSeparation},30 ${60 - earSeparation + 5},50" fill="${wingColor}" />
  <polygon points="${60 + earSeparation + 10},50 ${60 + earSeparation},30 ${60 + earSeparation - 5},50" fill="${wingColor}" />

  <!-- Feet -->
  <path d="M${60 - feetSeparation - 5},128 Q${60 - feetSeparation},135 ${60 - feetSeparation + 5},128" stroke="${beakAndFeetColor}" stroke-width="3" fill="none" stroke-linecap="round" />
  <path d="M${60 + feetSeparation - 5},128 Q${60 + feetSeparation},135 ${60 + feetSeparation + 5},128" stroke="${beakAndFeetColor}" stroke-width="3" fill="none" stroke-linecap="round" />
</svg>`;
        container.innerHTML = svg;
      }

      // Helper to make owls interactive (no changes here)
      function makeOwlInteractive(container) {
        let clickCount = 0;
        container.addEventListener("click", () => {
          clickCount++;
          container.classList.add("owl-shake");
          setTimeout(() => container.classList.remove("owl-shake"), 400);
          if (clickCount >= 5) {
            container.classList.add("owl-hoot");
            setTimeout(() => container.classList.remove("owl-hoot"), 1000);
            clickCount = 0;
          }
        });
      }

      function forgeAndDisplay(container, stringSeed) {
        const numericSeed = stringToHash(stringSeed); // Convert string to number
        generateOwl(container, numericSeed);
        if (container === owlCanvas) {
          seedDisplay.textContent = stringSeed; // Display the memorable string
        }
      }

      // UPDATED: Button click logic handles strings
      regenBtn.addEventListener("click", () => {
        let seedToUse = seedInput.value.trim();
        if (!seedToUse) {
          seedToUse = generateMemorableSeed(); // Generate new if input is empty
        }

        owlCanvas.classList.add("swoosh-out");
        setTimeout(() => {
          forgeAndDisplay(owlCanvas, seedToUse);
          owlCanvas.classList.remove("swoosh-out");
          owlCanvas.classList.add("swoosh-in");
          setTimeout(() => owlCanvas.classList.remove("swoosh-in"), 300);
        }, 300);

        seedInput.value = "";
      });

      shareBtn.addEventListener("click", async () => {
        const currentSeed = seedDisplay.textContent;
        await generateShareableImage(owlCanvas, currentSeed, shareImagePreview);

        // Prepare share links
        const shareText = `I forged this owl at the Concord Forge Syndicate! Seed: ${currentSeed}`;
        const shareUrl = `https://cfsyndicate.github.io/cfsyndicate?seed=${encodeURIComponent(currentSeed)}`;

        shareTwitter.href = `https://x.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}&via=cfsyndicate`;
        shareBsky.href = `https://bsky.app/intent/compose?text=${encodeURIComponent(shareText)}%0A%0A${encodeURIComponent(shareUrl)}`;

        shareModal.classList.remove("hidden");
      });

      closeModalBtn.addEventListener("click", () => {
        shareModal.classList.add("hidden");
      });

      if (saveBtn) {
        const spinner = saveBtn.querySelector("svg");
        const buttonText = saveBtn.querySelector(".button-text");

        saveBtn.addEventListener("click", async () => {
          // --- 1. Set Loading State ---
          saveBtn.disabled = true;
          spinner.classList.remove("hidden");
          buttonText.textContent = "Saving...";

          const currentSeed = seedDisplay.textContent;
          const currentGender = owlCanvas.dataset.owlGender;

          try {
            const response = await fetch("https://form-handler-api.onrender.com/owls/", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                seed: currentSeed,
                gender: currentGender,
              }),
            });

            if (response.ok) {
              // --- 2. Set Success State ---
              spinner.classList.add("hidden");
              buttonText.textContent = "Saved!";
              setTimeout(() => {
                // Reset after 2 seconds
                buttonText.textContent = "Save to Gallery";
                saveBtn.disabled = false;
              }, 2000);
            } else {
              // --- 3. Set Error State ---
              const errorData = await response.json();
              alert(`Error: ${errorData.detail}`);
              spinner.classList.add("hidden");
              buttonText.textContent = "Save to Gallery";
              saveBtn.disabled = false;
            }
          } catch (error) {
            // --- 4. Set Network Failure State ---
            console.error("Failed to save owl:", error);
            alert("Could not connect to the gallery. Please try again later.");
            spinner.classList.add("hidden");
            buttonText.textContent = "Save to Gallery";
            saveBtn.disabled = false;
          }
        });
      }

      // Initial generation
      const initialHeroSeed = generateMemorableSeed();
      const initialCanvasSeed = generateMemorableSeed();
      forgeAndDisplay(heroContainer, initialHeroSeed);
      forgeAndDisplay(owlCanvas, initialCanvasSeed);
      makeOwlInteractive(heroContainer);
      makeOwlInteractive(owlCanvas);
    });
  </script>
</MainLayout>
