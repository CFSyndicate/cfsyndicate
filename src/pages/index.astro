---
import MainLayout from "../layouts/MainLayout.astro";
import "../styles/global.css";
---

<MainLayout title="Home">
  <!-- Hero Section -->
  <section class="text-center py-20 md:py-32 px-6 bg-hero">
    <!-- Hero Owl Slot -->
    <div class="w-24 h-32 mx-auto mb-6 text-5xl">
      <div id="hero-owl" class="owl-container mx-auto w-24 h-32 mb-6 relative">
      </div>
    </div>

    <h1
      class="text-5xl md:text-7xl mb-6 text-white noselect title-glow"
      style="font-family: 'Anton', sans-serif;"
    >
      Concord Forge Syndicate
    </h1>

    <p
      class="punchline text-xl md:text-3xl max-w-2xl mx-auto text-white mt-8 md:mt-16 noselect"
      style="font-family: 'Poppins', sans-serif;"
    >
      <span>Code crafted <span class="highlight-strong">strong</span>.</span>
      <span>Design refined <span class="highlight-sharp">sharp</span>.</span>
      <span
        >Ideas forged into <span class="highlight-solutions">solutions</span
        >.</span
      >
    </p>
  </section>

  <!-- What We Do Section -->
  <section class="py-16 bg-black/50">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl mb-10">
        From Desktop to the Web, We Build It Right.
      </h2>
      <div class="grid md:grid-cols-3 gap-8">
        <!-- Card 1 -->
        <div class="bg-white/5 p-8 rounded-lg border border-white/10">
          <h3 class="text-xl text-forge-accent mb-2">Desktop Applications</h3>
          <p class="text-forge-text-secondary">
            Reliable and performant applications for Windows and Linux, tailored
            to your workflow.
          </p>
        </div>
        <!-- Card 2 -->
        <div class="bg-white/5 p-8 rounded-lg border border-white/10">
          <h3 class="text-xl text-forge-accent mb-2">Web Services & APIs</h3>
          <p class="text-forge-text-secondary">
            Secure, scalable backends and APIs built with Python, JavaScript,
            and modern frameworks.
          </p>
        </div>
        <!-- Card 3 -->
        <div class="bg-white/5 p-8 rounded-lg border border-white/10">
          <h3 class="text-xl text-forge-accent mb-2">Web Apps & Interfaces</h3>
          <p class="text-forge-text-secondary">
            Clean, intuitive, and fast user interfaces using modern web
            technologies.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Our Toolkit Section -->
  <section class="py-16">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl mb-10">Our areas of expertise</h2>
      <div
        class="flex flex-wrap justify-center items-center gap-4 text-forge-text-secondary"
      >
        <!-- You can create a simple Icon component for these -->
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >Python</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >C++</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >Qt</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >JavaScript</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >C# / .NET</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >Win32</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >Linux</span
        >
      </div>
    </div>
  </section>

  <!-- Procedural Owl Generator Section -->
  <section class="py-16 bg-black/50">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl mb-10">
        Procedural Owl <span class="highlight-strong-subtle">Forge</span>
      </h2>

      <div id="owlCanvas" class="mx-auto w-40 h-48"></div>

      <div class="mt-4">
        <p class="text-sm text-gray-400 mb-2">
          Current Seed: <code
            id="current-seed-display"
            class="bg-black/20 px-2 py-1 rounded"></code>
        </p>
        <input
          id="seed-input"
          type="text"
          placeholder="Enter a seed to forge..."
          class="bg-white/5 border border-white/10 rounded-lg px-4 py-2 text-center text-white"
        />
      </div>

      <button
        id="regenOwl"
        class="mt-4 px-4 py-2 bg-forge-accent text-black rounded-lg hover:bg-orange-500 transition"
      >
        Forge Owl
      </button>
      <button
        id="shareOwlBtn"
        class="mt-4 ml-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-500 transition"
      >
        Share Owl
      </button>
    </div>
  </section>

  <style>
    .bg-grid-pattern {
      background-color: #000000;
      background-image: linear-gradient(
          rgba(225, 93, 2, 0.1) 1px,
          transparent 1px
        ),
        linear-gradient(90deg, rgba(225, 93, 2, 0.1) 1px, transparent 1px);
      background-size: 3rem 3rem;
    }
  </style>

  <script>
    import * as htmlToImage from "html-to-image";

    const adjectives = [
      "Clever",
      "Wise",
      "Silent",
      "Swift",
      "Ancient",
      "Golden",
      "Iron",
      "Stout",
      "Keen",
      "Shadow",
    ];
    const nouns = [
      "Owl",
      "Forge",
      "Anvil",
      "Talon",
      "Feather",
      "Rune",
      "Hammer",
      "Spark",
      "Heart",
      "Wing",
    ];

    async function generateShareableImage(
      targetContainer,
      seed,
      shareImagePreview,
    ) {
      const owlColorHex = targetContainer.dataset.owlColor;
      const random = mulberry32(stringToHash(seed));

      // Create a temporary element to render the final image from
      const renderNode = document.createElement("div");
      renderNode.style.width = "400px";
      renderNode.style.height = "400px";
      renderNode.style.display = "flex";
      renderNode.style.alignItems = "center";
      renderNode.style.justifyContent = "center";
      renderNode.style.padding = "40px";

      // Procedural background: a soft radial gradient
      const bgHue = (random() * 360).toFixed(0);
      const bgColor1 = `hsl(${bgHue}, 30%, 10%)`;
      const bgColor2 = `hsl(${bgHue}, 35%, 5%)`;
      renderNode.style.background = `radial-gradient(circle, ${bgColor1} 0%, ${bgColor2} 100%)`;

      // Clone the owl SVG and add a drop shadow to make it pop
      const owlSvgClone = targetContainer.querySelector("svg").cloneNode(true);
      owlSvgClone.style.filter = "drop-shadow(0 10px 15px rgba(0,0,0,0.4))";
      renderNode.appendChild(owlSvgClone);

      // Append to body to render, but keep it off-screen
      document.body.appendChild(renderNode);

      try {
        // Generate the PNG, skipping font embedding to avoid CORS issues
        const dataUrl = await htmlToImage.toPng(renderNode, {
          skipFonts: true,
        });
        shareImagePreview.src = dataUrl;
      } catch (error) {
        console.error("Image generation failed!", error);
      } finally {
        // Clean up the temporary node
        document.body.removeChild(renderNode);
      }
    }

    // NEW: Generates a memorable seed like "Wise-Talon-77"
    function generateMemorableSeed() {
      const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
      const noun = nouns[Math.floor(Math.random() * nouns.length)];
      const num = Math.floor(Math.random() * 99) + 1;
      return `${adj}-${noun}-${num}`;
    }

    // NEW: Converts any string into a consistent 32-bit integer for the generator
    function stringToHash(str) {
      let hash = 0;
      for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash |= 0; // Convert to 32bit integer
      }
      return hash;
    }
    // 1. A seedable random number generator to replace Math.random()
    function mulberry32(a) {
      return function () {
        var t = (a += 0x6d2b79f5);
        t = Math.imul(t ^ (t >>> 15), t | 1);
        t ^= t + Math.imul(t ^ (t >>> 7), t | 61);
        return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
      };
    }

    document.addEventListener("astro:page-load", () => {
      // Get all elements
      const heroContainer = document.getElementById("hero-owl");
      const owlCanvas = document.getElementById("owlCanvas");
      const regenBtn = document.getElementById("regenOwl");
      const seedInput = document.getElementById("seed-input");
      const seedDisplay = document.getElementById("current-seed-display");

      const shareBtn = document.getElementById("shareOwlBtn");
      const shareModal = document.getElementById("share-modal");
      const closeModalBtn = document.getElementById("close-modal-btn");
      const shareImagePreview = document.getElementById("share-image-preview");
      const shareTwitter = document.getElementById("share-twitter");
      const shareBsky = document.getElementById("share-bsky");

      // 2. Updated generator function that accepts a seed
      function generateOwl(container, numericSeed) {
        const random = mulberry32(numericSeed);
        const bodyColors = ["#6b4226", "#4b3621", "#8b5e3c", "#5c4033"];
        const owlBodyColor =
          bodyColors[Math.floor(random() * bodyColors.length)];

        // Pass the main color out for the background generator
        container.dataset.owlColor = owlBodyColor;

        // Palettes and random values using our new 'random()' function
        const bellyColors = ["#f4e1c1", "#e8d3a8", "#fff2d1", "#f5deb3"];
        const eyeColors = ["#fff", "#f9f9f9", "#fffcf2"];
        const irisColors = ["#2c2c2c", "#3b2f2f", "#1b1b1b", "#4a3c2a"];

        const patternType = random() > 0.5 ? "spots" : "stripes";
        const eyeSize = random() * 8 + 12;
        const bodyColor = bodyColors[Math.floor(random() * bodyColors.length)];
        const bellyColor =
          bellyColors[Math.floor(random() * bellyColors.length)];
        const eyeColor = eyeColors[Math.floor(random() * eyeColors.length)];
        const irisColor = irisColors[Math.floor(random() * irisColors.length)];

        // SVG generation (no changes here)
        const svg = `<svg viewBox="0 0 120 140" xmlns="http://www.w3.org/2000/svg"><ellipse cx="60" cy="80" rx="40" ry="50" fill="${owlBodyColor}" /><ellipse cx="60" cy="90" rx="28" ry="35" fill="${bellyColor}" opacity="0.9"/><circle cx="40" cy="55" r="${eyeSize}" fill="${eyeColor}" /><circle cx="80" cy="55" r="${eyeSize}" fill="${eyeColor}" /><circle cx="40" cy="55" r="${eyeSize / 2}" fill="${irisColor}" /><circle cx="80" cy="55" r="${eyeSize / 2}" fill="${irisColor}" /><polygon points="55,70 65,70 60,80" fill="#e09f3e" /><polygon points="30,35 45,30 42,50" fill="${bodyColor}" /><polygon points="90,35 75,30 78,50" fill="${bodyColor}" />${patternType === "spots" ? `<circle cx="60" cy="100" r="2" fill="${bodyColor}" /><circle cx="50" cy="110" r="2" fill="${bodyColor}" /><circle cx="70" cy="110" r="2" fill="${bodyColor}" /><circle cx="60" cy="120" r="2" fill="${bodyColor}" />` : `<line x1="50" y1="95" x2="70" y2="95" stroke="${bodyColor}" stroke-width="2" /><line x1="50" y1="105" x2="70" y2="105" stroke="${bodyColor}" stroke-width="2" /><line x1="50" y1="115" x2="70" y2="115" stroke="${bodyColor}" stroke-width="2" />`}</svg>`;
        container.innerHTML = svg;
      }

      // Helper to make owls interactive (no changes here)
      function makeOwlInteractive(container) {
        let clickCount = 0;
        container.addEventListener("click", () => {
          clickCount++;
          container.classList.add("owl-shake");
          setTimeout(() => container.classList.remove("owl-shake"), 400);
          if (clickCount >= 5) {
            container.classList.add("owl-hoot");
            setTimeout(() => container.classList.remove("owl-hoot"), 1000);
            clickCount = 0;
          }
        });
      }

      function forgeAndDisplay(container, stringSeed) {
        const numericSeed = stringToHash(stringSeed); // Convert string to number
        generateOwl(container, numericSeed);
        if (container === owlCanvas) {
          seedDisplay.textContent = stringSeed; // Display the memorable string
        }
      }

      const initialHeroSeed = generateMemorableSeed();
      const initialCanvasSeed = generateMemorableSeed();
      forgeAndDisplay(heroContainer, initialHeroSeed);
      forgeAndDisplay(owlCanvas, initialCanvasSeed);
      makeOwlInteractive(heroContainer);
      makeOwlInteractive(owlCanvas);

      // UPDATED: Button click logic handles strings
      regenBtn.addEventListener("click", () => {
        let seedToUse = seedInput.value.trim();
        if (!seedToUse) {
          seedToUse = generateMemorableSeed(); // Generate new if input is empty
        }

        owlCanvas.classList.add("swoosh-out");
        setTimeout(() => {
          forgeAndDisplay(owlCanvas, seedToUse);
          owlCanvas.classList.remove("swoosh-out");
          owlCanvas.classList.add("swoosh-in");
          setTimeout(() => owlCanvas.classList.remove("swoosh-in"), 300);
        }, 300);

        seedInput.value = "";
      });

      shareBtn.addEventListener("click", async () => {
        const currentSeed = seedDisplay.textContent;
        await generateShareableImage(owlCanvas, currentSeed, shareImagePreview);

        // Prepare share links
        const shareText = `I forged this owl at the Concord Forge Syndicate! Seed: ${currentSeed}`;
        const shareUrl = `https://cfsyndicate.github.io/cfsyndicate?seed=${encodeURIComponent(currentSeed)}`;

        shareTwitter.href = `https://x.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}&via=cfsyndicate`;
        shareBsky.href = `https://bsky.app/intent/compose?text=${encodeURIComponent(shareText)}%0A%0A${encodeURIComponent(shareUrl)}`;

        shareModal.classList.remove("hidden");
      });

      closeModalBtn.addEventListener("click", () => {
        shareModal.classList.add("hidden");
      });
    });
  </script>
</MainLayout>
