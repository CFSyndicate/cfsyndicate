---
import MainLayout from "../layouts/MainLayout.astro";
import "../styles/global.css";
---

<MainLayout title="Home">
  <!-- Hero Section -->
  <section class="text-center py-20 md:py-32 px-6 bg-hero">
    <!-- Hero Owl Slot -->
    <div class="w-24 h-32 mx-auto mb-6 text-5xl">
      <div id="hero-owl" class="owl-container mx-auto w-24 h-32 mb-6 relative">
      </div>
    </div>

    <h1
      class="text-5xl md:text-7xl mb-6 text-white noselect title-glow"
      style="font-family: 'Anton', sans-serif;"
    >
      Concord Forge Syndicate
    </h1>

    <p
      class="punchline text-xl md:text-3xl max-w-2xl mx-auto text-white mt-8 md:mt-16 noselect"
      style="font-family: 'Poppins', sans-serif;"
    >
      <span>Code crafted <span class="highlight-strong">strong</span>.</span>
      <span>Design refined <span class="highlight-sharp">sharp</span>.</span>
      <span
        >Ideas forged into <span class="highlight-solutions">solutions</span
        >.</span
      >
    </p>
  </section>

  <!-- What We Do Section -->
  <section class="py-16 bg-black/50">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl mb-10">
        From Desktop to the Web, We Build It Right.
      </h2>
      <div class="grid md:grid-cols-3 gap-8">
        <!-- Card 1 -->
        <div class="bg-white/5 p-8 rounded-lg border border-white/10">
          <h3 class="text-xl text-forge-accent mb-2">Desktop Applications</h3>
          <p class="text-forge-text-secondary">
            Reliable and performant applications for Windows and Linux, tailored
            to your workflow.
          </p>
        </div>
        <!-- Card 2 -->
        <div class="bg-white/5 p-8 rounded-lg border border-white/10">
          <h3 class="text-xl text-forge-accent mb-2">Web Services & APIs</h3>
          <p class="text-forge-text-secondary">
            Secure, scalable backends and APIs built with Python, JavaScript,
            and modern frameworks.
          </p>
        </div>
        <!-- Card 3 -->
        <div class="bg-white/5 p-8 rounded-lg border border-white/10">
          <h3 class="text-xl text-forge-accent mb-2">Web Apps & Interfaces</h3>
          <p class="text-forge-text-secondary">
            Clean, intuitive, and fast user interfaces using modern web
            technologies.
          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Our Toolkit Section -->
  <section class="py-16">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl mb-10">Our areas of expertise</h2>
      <div
        class="flex flex-wrap justify-center items-center gap-4 text-forge-text-secondary"
      >
        <!-- You can create a simple Icon component for these -->
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >Python</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >C++</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >Qt</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >JavaScript</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >C# / .NET</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >Win32</span
        >
        <span class="bg-white/5 px-4 py-2 rounded-full border border-white/10"
          >Linux</span
        >
      </div>
    </div>
  </section>

  <!-- Procedural Owl Generator Section -->
  <section class="py-16 bg-black/50">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl mb-10">Procedural Owl Forge</h2>
      <div id="owlCanvas" class="mx-auto w-40 h-48"></div>
      <button
        id="regenOwl"
        class="mt-6 px-4 py-2 bg-forge-accent text-black rounded-lg hover:bg-orange-500 transition"
      >
        Summon a New Owl
      </button>
    </div>
  </section>

  <style>
    .bg-grid-pattern {
      background-color: #000000;
      background-image: linear-gradient(
          rgba(225, 93, 2, 0.1) 1px,
          transparent 1px
        ),
        linear-gradient(90deg, rgba(225, 93, 2, 0.1) 1px, transparent 1px);
      background-size: 3rem 3rem;
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const owl = document.querySelector(".owl-emoji");
      // Removed eyelids and blinking logic

      let clickCount = 0;

      owl.addEventListener("click", () => {
        clickCount++;

        // Always do shake animation
        owl.classList.add("owl-shake");
        setTimeout(() => owl.classList.remove("owl-shake"), 400);

        // On 5th click, do hoot animation
        if (clickCount === 5) {
          // Add hoot class
          owl.classList.add("owl-hoot");

          // Remove hoot class after animation ends
          setTimeout(() => {
            owl.classList.remove("owl-hoot");
          }, 1000);

          // Reset counter
          clickCount = 0;
        }
      });
    });

    document.addEventListener("DOMContentLoaded", () => {
      const heroContainer = document.getElementById("hero-owl");
      const owlCanvas = document.getElementById("owlCanvas");
      const regenBtn = document.getElementById("regenOwl");

      // Reusable owl generator
      function generateOwl(container, size = { w: 120, h: 140 }) {
        // palettes & randomness
        const bodyColors = ["#6b4226", "#4b3621", "#8b5e3c", "#5c4033"];
        const bellyColors = ["#f4e1c1", "#e8d3a8", "#fff2d1", "#f5deb3"];
        const eyeColors = ["#fff", "#f9f9f9", "#fffcf2"];
        const irisColors = ["#2c2c2c", "#3b2f2f", "#1b1b1b", "#4a3c2a"];
        const patternType = Math.random() > 0.5 ? "spots" : "stripes";
        const eyeSize = Math.random() * 8 + 12; // 12â€“20

        const bodyColor = bodyColors[(Math.random() * bodyColors.length) | 0];
        const bellyColor =
          bellyColors[(Math.random() * bellyColors.length) | 0];
        const eyeColor = eyeColors[(Math.random() * eyeColors.length) | 0];
        const irisColor = irisColors[(Math.random() * irisColors.length) | 0];

        // build SVG
        const svg = `
        <svg viewBox="0 0 ${size.w} ${size.h}" xmlns="http://www.w3.org/2000/svg">
          <ellipse cx="60" cy="80" rx="40" ry="50" fill="${bodyColor}" />
          <ellipse cx="60" cy="90" rx="28" ry="35" fill="${bellyColor}" opacity="0.9"/>
          <circle cx="40" cy="55" r="${eyeSize}" fill="${eyeColor}" />
          <circle cx="80" cy="55" r="${eyeSize}" fill="${eyeColor}" />
          <circle cx="40" cy="55" r="${eyeSize / 2}" fill="${irisColor}" />
          <circle cx="80" cy="55" r="${eyeSize / 2}" fill="${irisColor}" />
          <polygon points="55,70 65,70 60,80" fill="#e09f3e" />
          <polygon points="30,35 45,30 42,50" fill="${bodyColor}" />
          <polygon points="90,35 75,30 78,50" fill="${bodyColor}" />
          ${
            patternType === "spots"
              ? `<circle cx="60" cy="100" r="2" fill="${bodyColor}" />
                 <circle cx="50" cy="110" r="2" fill="${bodyColor}" />
                 <circle cx="70" cy="110" r="2" fill="${bodyColor}" />
                 <circle cx="60" cy="120" r="2" fill="${bodyColor}" />`
              : `<line x1="50" y1="95" x2="70" y2="95" stroke="${bodyColor}" stroke-width="2" />
                 <line x1="50" y1="105" x2="70" y2="105" stroke="${bodyColor}" stroke-width="2" />
                 <line x1="50" y1="115" x2="70" y2="115" stroke="${bodyColor}" stroke-width="2" />`
          }
        </svg>
      `;
        container.innerHTML = svg;
      }

      // Initial renders
      generateOwl(heroContainer, { w: 120, h: 140 });
      generateOwl(owlCanvas, { w: 120, h: 140 });

      // Regenerate bottom owl on click
      regenBtn.addEventListener("click", () =>
        generateOwl(owlCanvas, { w: 120, h: 140 })
      );
    });
  </script>
</MainLayout>
